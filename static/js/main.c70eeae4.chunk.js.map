{"version":3,"sources":["Application/helpers.js","Application/Product/ProductPrice.jsx","Application/Product/ProductNote.jsx","Application/Product/PurchaseHistory.jsx","Application/Product/PriceHistory.jsx","Application/Product/index.jsx","Application/SearchBricks.jsx","Application/ErrorBoundary.jsx","Application/index.jsx","reportWebVitals.js","index.js"],"names":["queryProductItemBySetNum","db","setNum","find","item","product_id","ProductPrice","type","count","price","ppp","TYPES","ProductNote","set","productNote","map","num_parts","set_num","PurchaseHistory","purchaseHistory","date","app","isUsed","is_used","weight","note","toFixed","PriceHistory","priceHistories","priceHistory","Product","state","testPrice","handleChange","event","setState","target","value","this","props","imgUrl","pattern","onChange","href","rel","src","alt","Component","SearchBricks","searchSetByKeyword","handleReset","inputRef","current","focus","keyword","rows","foundSet","String","indexOf","getSetByKeyword","setsDb","productNotes","purchaseHistories","filter","renderContent","debounce","console","debug","reduce","result","currentValue","window","React","createRef","className","autoFocus","ref","onClick","ErrorBoundary","error","errorInfo","style","whiteSpace","toString","componentStack","children","Application","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c70eeae4.chunk.js","sourcesContent":["/**\n * Get info object of a set by searching keyword\n * @param {Array} db\n * @param {string} keyword\n * @returns {Object|null}\n */\nexport const getSetByKeyword = (db, keyword) =>\n  db.find((set /** @type {Rebrickable~Set} */) => {\n    // Take an example of 4180878 set, the type `set_num` is number, not string.\n    return String(set.set_num).indexOf(keyword) !== -1;\n  }) || null;\n\n/**\n * By given set number, can get:\n * - Purchase history of product (in purchase_histories.json)\n * - Personal info of product (in product_notes.json)\n * @param {Array} db\n * @param {string} setNum e.g. \"10717-1\"\n * @returns {Object|null} Null when set not found\n */\nexport const queryProductItemBySetNum = (db, setNum) =>\n  db.find((item) => `${item.product_id}-1` === setNum) || null;\n\n/**\n * By given set number, can get:\n * - Purchase histories of products (in purchase_histories.json)\n * - Historical product prices (in price_histories.json)\n * @param {Array} rows\n * @param {string} setNum e.g. \"10717-1\"\n * @returns {PriceHistory[]}\n */\nexport const queryProductItemsBySetNum = (rows, setNum) =>\n  rows.filter((item) => `${item.product_id}-1` === setNum);\n","/**\n * @param {string} type \"taobao\" or \"pinduoduo\"\n */\nconst ProductPrice = ({ type, item, count }) => {\n  const price = item[`${type}_lowest_price`];\n  const ppp = price / count;\n  return (\n    <div>\n      <b>{`${type} lowest price: `}</b>\n      {price}\n      <b>PPP: </b>\n      {ppp}\n    </div>\n  );\n};\n\nexport default ProductPrice;\n","import ProductPrice from \"./ProductPrice\";\n\nconst TYPES = [\"taobao\", \"pinduoduo\"];\n\n/**\n * @param {Rebrickable~Set} set\n * @param {ProductNote|null} productNote\n */\nconst ProductNote = ({ set, productNote }) => {\n  if (!productNote) {\n    return (\n      <div>\n        {`No data (not found in product_notes table): Cannot find sets with given set number: ${set.set_num}`}\n      </div>\n    );\n  }\n  return (\n    <div>\n      {TYPES.map((type) => (\n        <div key={type}>\n          <ProductPrice type={type} item={productNote} count={set.num_parts} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ProductNote;\n","const PurchaseHistory = ({ set, purchaseHistory }) => {\n  if (!purchaseHistory) {\n    return (\n      <div>\n        {`No data (not found in purchase_histories table): Cannot find sets with given set number: ${set.set_num}`}\n      </div>\n    );\n  }\n\n  const { date, price, app, is_used: isUsed, weight, note } = purchaseHistory;\n  return (\n    <div>\n      <div>\n        <b>Purchase History:</b>\n      </div>\n      <div>\n        <span>{date}</span>|<b>{price}</b>|<span>{app}</span>|\n        <span>{isUsed ? \"Used\" : \"New\"}</span>|<span>{weight}</span>|\n        <span>PPP:{(price / set.num_parts).toFixed(2)}</span>\n        <br />\n        <p>{note}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default PurchaseHistory;\n","const PriceHistory = ({ set, priceHistories }) => {\n  if (priceHistories === 0) {\n    return (\n      <div>\n        {`No data (not found in price_histories table): Cannot find sets with given set number: ${set.set_num}`}\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {priceHistories.map((priceHistory) => {\n        const { date, price, app, note } = priceHistory;\n        return (\n          <div key={`${set.set_num}--${date}--${price}`}>\n            <div>\n              <b>Price History:</b>\n            </div>\n            <div>\n              <span>{date}</span>|<b>{price}</b>|<span>{app}</span>|\n              <span>PPP:{(price / set.num_parts).toFixed(2)}</span>\n              <br />\n              <p>{note}</p>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default PriceHistory;\n","import React, { Component } from \"react\";\n\nimport ProductNote from \"./ProductNote\";\nimport PurchaseHistory from \"./PurchaseHistory\";\nimport PriceHistory from \"./PriceHistory\";\n\n/**\n * @param {Object} set\n * @param {ProductNote|null} productNote\n * @param {PurchaseHistory|null} purchaseHistory\n */\nexport default class Product extends Component {\n  state = {\n    // Must input a number of price to test PPP\n    testPrice: \"\",\n  };\n  handleChange = (event) => {\n    this.setState({ testPrice: event.target.value });\n  };\n  render() {\n    const { set, productNote, purchaseHistory, priceHistories } = this.props;\n    const { testPrice } = this.state;\n    // How to render product images: https://brickset.com/article/49510/new-version-of-brickset-api-now-available\n    // {\n    //   \"thumbnailURL\": \" https://images.brickset.com/sets/small/21322-1.jpg \",\n    //   \"imageURL\": \" https://images.brickset.com/sets/images/21322-1.jpg \",\n    //   \"bricksetURL\": \" https://brickset.com/sets/21322-1 \",\n    // }\n    let imgUrl = `https://images.brickset.com/sets/small/${set.set_num}.jpg`;\n    imgUrl = `https://xx7y7xx.github.io/static/images.brickset.com/sets/small/${set.set_num}.jpg`;\n    return (\n      <div>\n        <div>\n          <b>Product ID: </b>\n          {set.set_num}\n        </div>\n        <div>\n          <b>Piece Count: </b>\n          {set.num_parts}{\" \"}\n          <input\n            type=\"number\"\n            pattern=\"[0-9]*\" /* iOS: Bring up the numeric keypad*/\n            value={testPrice}\n            onChange={this.handleChange}\n          />\n          {testPrice ? (\n            <span> PPP: {(testPrice / set.num_parts).toFixed(2)}</span>\n          ) : null}\n        </div>\n        <ProductNote set={set} productNote={productNote} />\n        <PurchaseHistory set={set} purchaseHistory={purchaseHistory} />\n        <PriceHistory set={set} priceHistories={priceHistories} />\n        <a href={imgUrl} target=\"_blank\" rel=\"noreferrer\">\n          <img src={imgUrl} alt={`LEGO ${set.set_num}`} />\n        </a>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport debounce from \"lodash.debounce\";\n\nimport setsDb from \"./db/sets.csv.json\";\nimport productNotes from \"./db/product_notes.json\";\nimport priceHistories from \"./db/price_histories.json\";\nimport purchaseHistories from \"./db/purchase_histories.json\";\nimport {\n  queryProductItemBySetNum,\n  queryProductItemsBySetNum,\n  getSetByKeyword,\n} from \"./helpers\";\nimport Product from \"./Product\";\n\nconst defaultValue = \"\";\n\nexport default class SearchBricks extends Component {\n  state = {\n    value: defaultValue,\n    /** @type {Brickable~Set} LEGO set */\n    set: null,\n    /** @type {ProductNote} */\n    productNote: null,\n    /** @type {PurchaseHistory} */\n    purchaseHistory: null,\n    /** @type {PriceHistory[]} */\n    priceHistories: [],\n  };\n\n  constructor(props) {\n    super(props);\n    this.searchSetByKeyword = debounce(this.searchSetByKeyword, 500);\n    console.debug(\n      \"purchaseHistories\",\n      purchaseHistories.reduce((result, currentValue) => {\n        result += currentValue.price;\n        return result;\n      }, 0)\n    );\n    window.setsDb = setsDb;\n    this.inputRef = React.createRef();\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      value: event.target.value,\n    });\n    this.searchSetByKeyword(event.target.value);\n  };\n\n  handleReset = () => {\n    this.setState({ value: defaultValue });\n    this.inputRef.current.focus();\n  };\n\n  searchSetByKeyword = (keyword) => {\n    const foundSet = getSetByKeyword(setsDb, keyword);\n    if (!foundSet) {\n      this.setState({ set: null });\n      return;\n    }\n\n    this.setState({\n      set: foundSet,\n      productNote: queryProductItemBySetNum(productNotes, foundSet.set_num),\n      purchaseHistory: queryProductItemBySetNum(\n        purchaseHistories,\n        foundSet.set_num\n      ),\n      priceHistories: queryProductItemsBySetNum(\n        priceHistories,\n        foundSet.set_num\n      ),\n    });\n  };\n\n  renderContent = () => {\n    const {\n      value,\n      set,\n      productNote,\n      purchaseHistory,\n      priceHistories,\n    } = this.state;\n\n    if (!value) {\n      return \"Please input LEGO product ID, e.g. 75192\";\n    }\n\n    if (!set) {\n      return \"No data (not found in sets DB)\";\n    }\n\n    return (\n      <Product\n        set={set}\n        productNote={productNote}\n        purchaseHistory={purchaseHistory}\n        priceHistories={priceHistories}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"search-bricks\">\n        <input\n          autoFocus\n          ref={this.inputRef}\n          type=\"number\"\n          pattern=\"[0-9]*\" /* iOS: Bring up the numeric keypad*/\n          value={this.state.value}\n          onChange={this.handleChange}\n        ></input>{\" \"}\n        <button onClick={this.handleReset}>Reset</button>\n        <div>{this.renderContent()}</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  // static getDerivedStateFromError(error) {\n  //   // Update state so the next render will show the fallback UI.\n  //   return { hasError: true };\n  // }\n  //\n  // componentDidCatch(error, errorInfo) {\n  //   // You can also log the error to an error reporting service\n  //   logErrorToMyService(error, errorInfo);\n  // }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n    // You can also log error messages to an error reporting service here\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n","import React, { Component } from \"react\";\n\nimport SearchBricks from \"./SearchBricks\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\nimport \"./index.css\";\n\nexport default class Application extends Component {\n  render() {\n    return (\n      <div>\n        <ErrorBoundary>\n          <SearchBricks />\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport Application from \"./Application\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  <Application />,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}